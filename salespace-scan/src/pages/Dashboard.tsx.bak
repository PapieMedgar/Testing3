import { 
  Calendar,
  MapPin,
  Target,
  Users,
  TrendingUp,
  CheckCircle,
  Clock,
  Plus,
  Edit,
  Trash2,
  Award,
  TrendingDown,
  AlertCircle
} from "lucide-react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { VisitManagement } from "@/components/visits/VisitManagement"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Badge } from "@/components/ui/badge"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"
import { StatCard } from "@/components/ui/stat-card"
import { useAuth } from "@/hooks/use-auth"
import { useQuery } from "@tanstack/react-query"
import { agentAPI, managerAPI, adminAPI } from "@/lib/api"
import { useState } from "react"
import { toast } from "sonner"

interface Goal {
  id: number;
  title: string;
  description: string;
  type: string;
  target: number;
  current: number;
  assignee_id: number;
  assignee_name: string;
  assignee_type: string;
  deadline: string;
  status: string;
  created_at: string;
}

const Dashboard = () => {
  const { user } = useAuth();
  
  // Goals management state
  const [isCreateGoalDialogOpen, setIsCreateGoalDialogOpen] = useState(false);
  const [newGoalTitle, setNewGoalTitle] = useState("");
  const [newGoalDescription, setNewGoalDescription] = useState("");
  const [newGoalTarget, setNewGoalTarget] = useState("");
  const [newGoalType, setNewGoalType] = useState("visits");
  const [newGoalAssignee, setNewGoalAssignee] = useState("");
  const [newGoalDeadline, setNewGoalDeadline] = useState("");


  // Fetch data based on user role
  const { data: apiData, isLoading, error } = useQuery({
    queryKey: ['dashboard', user?.role, user?.id],
    queryFn: async () => {
      switch (user?.role) {
        case 'AGENT': {
          const visits = await agentAPI.getMyVisits();
          return { visits };
        }
        case 'MANAGER': {
          const agents = await managerAPI.getMyAgents();
          return { agents };
        }
        case 'ADMIN': {
          const [managers, allAgents, allUsers] = await Promise.all([
            adminAPI.getManagers(),
            adminAPI.getAgents(),
            adminAPI.getAllUsers()
          ]);
          return { managers, agents: allAgents, users: allUsers };
        }
        default:
          return null;
      }
    },
    enabled: !!user,
    retry: 3,
    retryDelay: 1000
  });

  // Only use real API data for dashboard
  const dashboardData = apiData || {};

  // Goals management functions
  const handleCreateGoal = () => {
    if (!newGoalTitle.trim() || !newGoalTarget.trim() || !newGoalAssignee.trim()) {
      toast.error("Please fill in all required fields");
      return;
    }

    // In a real app, this would call an API
    toast.success("Goal created successfully!");
    setIsCreateGoalDialogOpen(false);
    setNewGoalTitle("");
    setNewGoalDescription("");
    setNewGoalTarget("");
    setNewGoalType("visits");
    setNewGoalAssignee("");
    setNewGoalDeadline("");
  };

  const getGoalStatusColor = (status: string) => {
    switch (status) {
      case 'completed': return 'bg-green-100 text-green-800';
      case 'in_progress': return 'bg-blue-100 text-blue-800';
      case 'overdue': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getGoalProgress = (current: number, target: number) => {
    return Math.min(100, Math.round((current / target) * 100));
  };

  const getGoalTypeIcon = (type: string) => {
    switch (type) {
      case 'visits': return <MapPin className="w-4 h-4" />;
      case 'customers': return <Users className="w-4 h-4" />;
      case 'revenue': return <TrendingUp className="w-4 h-4" />;
      case 'training': return <Award className="w-4 h-4" />;
      case 'coverage': return <Target className="w-4 h-4" />;
      default: return <Target className="w-4 h-4" />;
    }
  };

  // Render different dashboard based on user role
  const renderDashboardContent = () => {
    if (isLoading) {
      return (
        <div className="flex items-center justify-center p-8">
          <div className="text-center">
            <div className="animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4"></div>
            <p>Loading dashboard...</p>
          </div>
        </div>
      );
    }

    if (error) {
      return (
        <div className="flex items-center justify-center p-8">
          <div className="text-center">
            <p className="text-red-600 mb-4">Failed to load dashboard data</p>
            <p className="text-sm text-muted-foreground">
              Please check your connection and try again
            </p>
          </div>
        </div>
      );
    }

    switch (user?.role) {
      case 'AGENT': {
        const visits = dashboardData?.visits || [];
        const todayVisits = visits.filter((c: { timestamp: string }) => {
          const today = new Date().toDateString();
          return new Date(c.timestamp).toDateString() === today;
        });
        
        return (
          <div className="space-y-6">
            <div className="grid gap-4 md:grid-cols-3">
              <StatCard
                title="Today's Visits"
                value={todayVisits.length}
                icon={CheckCircle}
                description="Visits completed today"
              />
              <StatCard
                title="Total Visits"
                value={visits.length}
                icon={Target}
                description="All time visits"
              />
              <StatCard
                title="Pending Approval"
                value={visits.filter((c: { status: string }) => c.status === 'PENDING').length}
                icon={Clock}
                description="Awaiting manager approval"
              />
            </div>
            
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <CheckCircle className="w-5 h-5" />
                  Recent Visits
                </CardTitle>
              </CardHeader>
              <CardContent>
                {visits.length === 0 ? (
                  <p className="text-muted-foreground text-center py-8">
                    No visits yet. Start by visiting a shop!
                  </p>
                ) : (
                  <div className="space-y-3">
                    {visits.slice(0, 5).map((visit: { id: number; shop_id: number; timestamp: string; notes?: string; status: string }) => (
                      <div key={visit.id} className="p-4 bg-muted/50 rounded-lg border">
                        <div className="flex justify-between items-start">
                          <div>
                            <p className="font-medium">Shop ID: {visit.shop_id}</p>
                            <p className="text-sm text-muted-foreground">
                              {new Date(visit.timestamp).toLocaleString()}
                            </p>
                            {visit.notes && (
                              <p className="text-xs text-muted-foreground mt-1">{visit.notes}</p>
                            )}
                          </div>
                          <span className={`px-2 py-1 rounded text-xs font-medium ${
                            visit.status === 'APPROVED' ? 'bg-green-100 text-green-800' :
                            visit.status === 'FLAGGED' ? 'bg-red-100 text-red-800' :
                            'bg-yellow-100 text-yellow-800'
                          }`}>
                            {visit.status}
                          </span>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        );
      }
      
      case 'MANAGER': {
        const agents = dashboardData?.agents || [];
        
        return (
          <div className="space-y-6">
            <div className="grid gap-4 md:grid-cols-3">
              <StatCard
                title="My Agents"
                value={agents.length}
                icon={Users}
                description="Agents under management"
              />
              <StatCard
                title="Active Agents"
                value={agents.length}
                icon={TrendingUp}
                description="Currently active agents"
              />
              <StatCard
                title="Shops Coverage"
                value="--"
                icon={MapPin}
                description="Total shops covered"
              />
            </div>
            
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Users className="w-5 h-5" />
                  My Team
                </CardTitle>
              </CardHeader>
              <CardContent>
                {agents.length === 0 ? (
                  <p className="text-muted-foreground text-center py-8">
                    No agents assigned yet.
                  </p>
                ) : (
                  <div className="space-y-3">
                    {agents.map((agent: { id: number; phone: string }) => (
                      <div key={agent.id} className="p-4 bg-muted/50 rounded-lg border">
                        <div className="flex justify-between items-center">
                          <div>
                            <p className="font-medium">{agent.phone}</p>
                            <p className="text-sm text-muted-foreground">Agent ID: {agent.id}</p>
                          </div>
                          <span className="px-2 py-1 rounded text-xs font-medium bg-green-100 text-green-800">
                            Active
                          </span>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        );
      }
      
      case 'ADMIN': {
        const { managers = [], agents: allAgents = [], goals = [] } = dashboardData || {};
        
        const activeGoals = goals.filter((goal: Goal) => goal.status === 'in_progress');
        const completedGoals = goals.filter((goal: Goal) => goal.status === 'completed');
        const overdueGoals = goals.filter((goal: Goal) => {
          return goal.status === 'in_progress' && new Date(goal.deadline) < new Date();
        });
        
        return (
          <Tabs defaultValue="overview" className="space-y-6">
            <TabsList>
              <TabsTrigger value="overview">Overview</TabsTrigger>
              <TabsTrigger value="visits">Visit Logs</TabsTrigger>
            </TabsList>

            <TabsContent value="overview" className="space-y-6">

        return (
          <Tabs defaultValue="overview" className="space-y-6">
            <TabsList>
              <TabsTrigger value="overview">Overview</TabsTrigger>
              <TabsTrigger value="visits">Visit Logs</TabsTrigger>
            </TabsList>

            <TabsContent value="overview" className="space-y-6">{
        
        return (
          <div className="space-y-6">
            <div className="grid gap-4 md:grid-cols-4">
              <StatCard
                title="Total Managers"
                value={managers.length}
                icon={Users}
                description="Active managers"
              />
              <StatCard
                title="Total Agents"
                value={allAgents.length}
                icon={Target}
                description="Active agents"
              />
              <StatCard
                title="Active Goals"
                value={activeGoals.length}
                icon={Award}
                description="Goals in progress"
              />
              <StatCard
                title="System Health"
                value="Online"
                icon={CheckCircle}
                description="All systems operational"
              />
            </div>

            {/* Goals Management Section */}
            <Card>
              <CardHeader>
                <div className="flex items-center justify-between">
                  <CardTitle className="flex items-center gap-2">
                    <Award className="w-5 h-5" />
                    Goals Management
                  </CardTitle>
                  <Dialog open={isCreateGoalDialogOpen} onOpenChange={setIsCreateGoalDialogOpen}>
                    <DialogTrigger asChild>
                      <Button>
                        <Plus className="w-4 h-4 mr-2" />
                        Create Goal
                      </Button>
                    </DialogTrigger>
                    <DialogContent className="max-w-md">
                      <DialogHeader>
                        <DialogTitle>Create New Goal</DialogTitle>
                        <DialogDescription>
                          Set performance targets for your team members.
                        </DialogDescription>
                      </DialogHeader>
                      <div className="space-y-4 py-4">
                        <div className="space-y-2">
                          <Label htmlFor="goalTitle">Goal Title *</Label>
                          <Input
                            id="goalTitle"
                            placeholder="Enter goal title"
                            value={newGoalTitle}
                            onChange={(e) => setNewGoalTitle(e.target.value)}
                          />
                        </div>
                        <div className="space-y-2">
                          <Label htmlFor="goalDescription">Description</Label>
                          <Input
                            id="goalDescription"
                            placeholder="Goal description"
                            value={newGoalDescription}
                            onChange={(e) => setNewGoalDescription(e.target.value)}
                          />
                        </div>
                        <div className="grid grid-cols-2 gap-4">
                          <div className="space-y-2">
                            <Label htmlFor="goalType">Type *</Label>
                            <Select value={newGoalType} onValueChange={setNewGoalType}>
                              <SelectTrigger>
                                <SelectValue />
                              </SelectTrigger>
                              <SelectContent>
                                <SelectItem value="visits">Visits</SelectItem>
                                <SelectItem value="customers">Customers</SelectItem>
                                <SelectItem value="revenue">Revenue</SelectItem>
                                <SelectItem value="training">Training</SelectItem>
                                <SelectItem value="coverage">Coverage</SelectItem>
                              </SelectContent>
                            </Select>
                          </div>
                          <div className="space-y-2">
                            <Label htmlFor="goalTarget">Target *</Label>
                            <Input
                              id="goalTarget"
                              type="number"
                              placeholder="Target value"
                              value={newGoalTarget}
                              onChange={(e) => setNewGoalTarget(e.target.value)}
                            />
                          </div>
                        </div>
                        <div className="space-y-2">
                          <Label htmlFor="goalAssignee">Assign To *</Label>
                          <Select value={newGoalAssignee} onValueChange={setNewGoalAssignee}>
                            <SelectTrigger>
                              <SelectValue placeholder="Select assignee" />
                            </SelectTrigger>
                            <SelectContent>
                              {managers.map((manager: { id: number; phone: string }) => (
                                <SelectItem key={manager.id} value={manager.id.toString()}>
                                  Manager: {manager.phone}
                                </SelectItem>
                              ))}
                              {allAgents.map((agent: { id: number; phone: string }) => (
                                <SelectItem key={agent.id} value={agent.id.toString()}>
                                  Agent: {agent.phone}
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                        </div>
                        <div className="space-y-2">
                          <Label htmlFor="goalDeadline">Deadline *</Label>
                          <Input
                            id="goalDeadline"
                            type="date"
                            value={newGoalDeadline}
                            onChange={(e) => setNewGoalDeadline(e.target.value)}
                          />
                        </div>
                      </div>
                      <DialogFooter>
                        <Button variant="outline" onClick={() => setIsCreateGoalDialogOpen(false)}>
                          Cancel
                        </Button>
                        <Button onClick={handleCreateGoal}>
                          Create Goal
                        </Button>
                      </DialogFooter>
                    </DialogContent>
                  </Dialog>
                </div>
              </CardHeader>
              <CardContent>
                {/* Goals Stats */}
                <div className="grid gap-4 md:grid-cols-3 mb-6">
                  <div className="p-4 bg-blue-50 rounded-lg border border-blue-200">
                    <div className="flex items-center gap-2">
                      <Clock className="w-5 h-5 text-blue-600" />
                      <div>
                        <p className="text-sm text-blue-700">Active Goals</p>
                        <p className="text-2xl font-bold text-blue-800">{activeGoals.length}</p>
                      </div>
                    </div>
                  </div>
                  <div className="p-4 bg-green-50 rounded-lg border border-green-200">
                    <div className="flex items-center gap-2">
                      <CheckCircle className="w-5 h-5 text-green-600" />
                      <div>
                        <p className="text-sm text-green-700">Completed</p>
                        <p className="text-2xl font-bold text-green-800">{completedGoals.length}</p>
                      </div>
                    </div>
                  </div>
                  <div className="p-4 bg-red-50 rounded-lg border border-red-200">
                    <div className="flex items-center gap-2">
                      <AlertCircle className="w-5 h-5 text-red-600" />
                      <div>
                        <p className="text-sm text-red-700">Overdue</p>
                        <p className="text-2xl font-bold text-red-800">{overdueGoals.length}</p>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Goals List */}
                {goals.length === 0 ? (
                  <div className="text-center py-8">
                    <Award className="w-12 h-12 text-muted-foreground mx-auto mb-4" />
                    <h3 className="text-lg font-medium mb-2">No goals yet</h3>
                    <p className="text-muted-foreground mb-4">
                      Create performance goals to track team progress
                    </p>
                  </div>
                ) : (
                  <div className="space-y-4">
                    {goals.map((goal: Goal) => (
                      <div key={goal.id} className="p-4 border rounded-lg">
                        <div className="flex justify-between items-start mb-3">
                          <div className="flex-1">
                            <div className="flex items-center gap-2 mb-1">
                              {getGoalTypeIcon(goal.type)}
                              <h4 className="font-medium">{goal.title}</h4>
                            </div>
                            <p className="text-sm text-muted-foreground mb-2">
                              {goal.description}
                            </p>
                            <div className="flex items-center gap-4 text-sm">
                              <span className="text-muted-foreground">
                                Assigned to: {goal.assignee_name}
                              </span>
                              <span className="text-muted-foreground">
                                Due: {new Date(goal.deadline).toLocaleDateString()}
                              </span>
                            </div>
                          </div>
                          <div className="flex items-center gap-2">
                            <Badge className={getGoalStatusColor(goal.status)}>
                              {goal.status.replace('_', ' ')}
                            </Badge>
                            <Button variant="ghost" size="sm">
                              <Edit className="w-4 h-4" />
                            </Button>
                            <Button variant="ghost" size="sm">
                              <Trash2 className="w-4 h-4" />
                            </Button>
                          </div>
                        </div>
                        
                        {/* Progress Bar */}
                        <div className="space-y-2">
                          <div className="flex justify-between text-sm">
                            <span>Progress: {goal.current} / {goal.target}</span>
                            <span>{getGoalProgress(goal.current, goal.target)}%</span>
                          </div>
                          <div className="w-full bg-gray-200 rounded-full h-2">
                            <div 
                              className={`h-2 rounded-full ${
                                goal.status === 'completed' ? 'bg-green-500' : 
                                getGoalProgress(goal.current, goal.target) >= 80 ? 'bg-blue-500' :
                                getGoalProgress(goal.current, goal.target) >= 50 ? 'bg-yellow-500' : 'bg-red-500'
                              }`}
                              style={{ width: `${getGoalProgress(goal.current, goal.target)}%` }}
                            ></div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>
            
            <div className="grid gap-6 lg:grid-cols-2">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Users className="w-5 h-5" />
                    Managers
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  {managers.length === 0 ? (
                    <p className="text-muted-foreground text-center py-8">
                      No managers created yet.
                    </p>
                  ) : (
                    <div className="space-y-3">
                      {managers.slice(0, 5).map((manager: { id: number; phone: string; role: string }) => (
                        <div key={manager.id} className="p-4 bg-muted/50 rounded-lg border">
                          <div className="flex justify-between items-center">
                            <div>
                              <p className="font-medium">{manager.phone}</p>
                              <p className="text-sm text-muted-foreground">Manager ID: {manager.id}</p>
                            </div>
                            <span className="px-2 py-1 rounded text-xs font-medium bg-blue-100 text-blue-800">
                              {manager.role}
                            </span>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </CardContent>
              </Card>
              
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Target className="w-5 h-5" />
                    Recent Agents
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  {allAgents.length === 0 ? (
                    <p className="text-muted-foreground text-center py-8">
                      No agents created yet.
                    </p>
                  ) : (
                    <div className="space-y-3">
                      {allAgents.slice(0, 5).map((agent: { id: number; phone: string; manager_id?: number; role: string }) => (
                        <div key={agent.id} className="p-4 bg-muted/50 rounded-lg border">
                          <div className="flex justify-between items-center">
                            <div>
                              <p className="font-medium">{agent.phone}</p>
                              <p className="text-sm text-muted-foreground">
                                Manager: {agent.manager_id || 'Unassigned'}
                              </p>
                            </div>
                            <span className="px-2 py-1 rounded text-xs font-medium bg-green-100 text-green-800">
                              {agent.role}
                            </span>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </CardContent>
              </Card>
            </div>
          </div>
        );
      }
      
      default:
        return (
          <div className="flex items-center justify-center p-8">
            <p>Welcome to Sales Sync!</p>
          </div>
        );
    }
  };

  return (
    <div className="p-6 space-y-6">
      <div>
        <h1 className="text-3xl font-bold tracking-tight">Dashboard</h1>
        <p className="text-muted-foreground">
          Welcome back, {user?.name || 'User'}! Here's what's happening today.
        </p>
      </div>
      
      {renderDashboardContent()}
    </div>
  );
};

export default Dashboard;